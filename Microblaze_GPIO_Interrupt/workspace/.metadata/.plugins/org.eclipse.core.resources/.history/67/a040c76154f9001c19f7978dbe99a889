/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <sleep.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xuartlite.h"
#include "xgpio.h"
#include "xintc.h"
#include "xil_exception.h"
#include "xstatus.h"
#include "xtmrctr.h"
#include "xil_exception.h"

// Driver definition
	XIntc Intc; // Instance of Interrupt controller
	XGpio GPIO_0; // Instance of GPIO 0 driver
	TmrCtr TimerCounterInst;  // The instance of the Timer Counter

//Function declaration
void GPIO_Init()
{
	// INITIALIZE THE PERIPHERALS & SET DIRECTIONS OF GPIO
	int status; // check status of peripheral devices
	status = XGpio_Initialize(&GPIO_0, XPAR_GPIO_0_DEVICE_ID); // Initialize LED and switch
	usleep(100);
	if (status != XST_SUCCESS)
	{
		xil_printf("GPIO Initialization fail.\n\r");
	}
	else
	    xil_printf("GPIO Initialization succeed.\n\r");
	XGpio_SetDataDirection(&GPIO_0,1,1); // input channel 1 (switch 0)
	XGpio_SetDataDirection(&GPIO_0,2,0); // output channel 2 (LED 0)
	// Activate GPIO interrupt
	XGpio_InterruptClear(&GPIO_0, 0);
	XGpio_InterruptGlobalEnable(&GPIO_0);
	XGpio_InterruptEnable(&GPIO_0, 0x1);
}

void GPIOInterruptHandler(void *CallbackRef)
{
	// Disable GPIO interrupts
	XIntc_Stop(&Intc);
	xil_printf("Switch is closed. ISR is activated.\n\r");
	// LED blinking
	XGpio_DiscreteWrite(&GPIO_0,2,0x1);
	sleep(1);
	XGpio_DiscreteWrite(&GPIO_0,2,0);
	sleep(1);
	// Clear GPIO interrupt after Interrupt is serviced.
	XGpio_InterruptClear(&GPIO_0, 0x1); // clear GPIO interrupt
	XIntc_Acknowledge(&Intc, 0); // clear interrupt from Interrupt Controller
	// Enable GPIO interrupts
	XIntc_Start(&Intc, XIN_REAL_MODE);
}

int Interrupt_Init()
{
	int stat; // check status of instance
	microblaze_enable_interrupts();
	stat = XIntc_Initialize(&Intc, XPAR_INTC_0_DEVICE_ID);
	usleep(100);
	xil_printf("Initialize Intc: %u\n\r", stat);
	// connect interrupt to ISR
	stat = XIntc_Connect(&Intc, XPAR_INTC_0_GPIO_0_VEC_ID, (XInterruptHandler)GPIOInterruptHandler, (void*)0);
	usleep(100);
	if(stat != XST_SUCCESS)
	{
		xil_printf("Failed read channel connect intc %d\r\n",stat);
		return XST_FAILURE;
	}
	xil_printf("Connecting Intc with code: %u\n\r", stat);
	usleep(100);
	XIntc_Enable(&Intc, 0); //This works intermittently
	xil_printf("Enabling Intc \n\r");
	usleep(100);
	XIntc_Start(&Intc, XIN_REAL_MODE);
	xil_printf("Starting Intc \n\r");

	//XIntc_MasterEnable(&Intc);
	XIntc_MasterEnable(0x41200000);
	xil_printf("Enable Master \n\r");
	xil_printf("Enable Exceptions  \n\r");

	//Xil_ExceptionEnable();
	usleep(100);
	return stat;
}

int Timer_PWM_Init()
{
	int Status;
	/* Run the Timer Counter PWM example */
	Status = TmrCtrPwmExample(&Intc, &TimerCounterInst,
			XPAR_AXI_TIMER_0_DEVICE_ID, TMRCTR_INTERRUPT_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("Tmrctr PWM Example Failed\r\n");
			return XST_FAILURE;
	}
	xil_printf("Successfully ran Timer PWM mode.\r\n");
}

// main function
int main()
{
    init_platform();
    print("Microblaze GPIO Interrupt is running ...\n\r");
    GPIO_Init();
    Interrupt_Init();
    while(1) // infinite loop
    {
    	for(;;);
    }
    cleanup_platform();
    return 0;
}
